#!/bin/bash

usage() {
    echo ""
    echo "Usage: `basename $0`"
    echo ""
    echo "  Description:"
    echo "    Creates all merged calendars listed in .mergeCalendars by combining the source "
    echo "    calendars listed."
    echo ""
    echo "  Dependancies:"
    echo "    - The file .mergeCalendars is required and can be populated by calling the script"
    echo "      Script/addMergeCalendar"
    echo "    - All source calendars must be downloaded present in the SourceCalendars directory"
    echo "      by calling the script Scripts/downloadSourceCalendars"
    exit 1
}

if [[ ( $@ == "--help") ||  $@ == "-h" ]] 
then 
  usage
  exit 0
fi 

if ! [ -f .mergeCalendars ] || [ `cat .mergeCalendars | wc -l` -eq 0 ]
then
  touch .mergeCalendars
fi

cd SourceCalendars

while read mergeCalendar; do
  mergeCalendarName=$(echo $mergeCalendar | cut -f1 -d\|)
  mergeCalendarKey=$(echo $mergeCalendar | cut -f2 -d\|)
  calendarsToMerge=$(echo $mergeCalendar | cut -f3 -d\|)

  if [ -z "$mergeCalendarName" ]
  then
    echo "Skipping line: \"$mergeCalendar\", it doesn't have a merge calendar name."
  elif [ -z "$mergeCalendarKey" ]
  then
    echo "Skipping \"$mergeCalendarName\": it doesn't have a merge calendar key."
  elif [ -z "$calendarsToMerge" ]
  then
    echo "Skipping \"$mergeCalendarName\": it doesn't have any calendars to merge"
  else
    echo "Merging calenders for \"$mergeCalendarName\" to ./MergedCalendars/$mergeCalendarKey.ics"
    cat ../Templates/header.icstemplate $calendarsToMerge ../Templates/footer.icstemplate | sed -e "s/{{MergeCalendarName}}/$mergeCalendarName/g" > ../MergedCalendars/$mergeCalendarKey.ics
  fi
done <../.mergeCalendars
cd ..
